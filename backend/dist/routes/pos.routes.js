"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cashier_controller_1 = require("../controllers/pos/cashier.controller");
const errorHandler_1 = require("../middleware/errorHandler");
const router = express_1.default.Router();
router.get('/dashboard', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getDashboard));
router.get('/products', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getProducts));
router.get('/products/search', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.searchProducts));
router.get('/products/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getProductById));
router.get('/customers', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getCustomers));
router.get('/customers/search', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.searchCustomers));
router.get('/customers/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getCustomerById));
router.post('/customers', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.createCustomer));
router.put('/customers/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.updateCustomer));
router.get('/transactions', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getTransactions));
router.get('/transactions/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getTransactionById));
router.post('/transactions', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.createTransaction));
router.put('/transactions/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.updateTransaction));
router.patch('/transactions/:id/cancel', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.cancelTransaction));
router.post('/sales-transactions', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.createSalesTransaction));
router.get('/sales-transactions/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getSalesTransactionById));
router.get('/transactions/:transactionId/items', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getTransactionItems));
router.post('/transaction-items', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.createTransactionItem));
router.post('/payments', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.processPayment));
router.get('/transactions/:transactionId/payments', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getPayments));
router.post('/sessions', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.startSession));
router.patch('/sessions/:id/end', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.endSession));
router.get('/sessions/current/:cashierId', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getCurrentSession));
router.get('/sessions/:id', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getSessionById));
router.get('/receipts/:transactionId', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.generateReceipt));
router.get('/reports/daily/:date', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getDailyReport));
router.get('/reports/sales', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getSalesReport));
router.get('/inventory/:productId', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.checkInventory));
router.get('/inventory/low-stock', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getLowStockItems));
router.get('/quick-sales', (0, errorHandler_1.asyncHandler)(cashier_controller_1.POSCashierController.getQuickSales));
exports.default = router;
//# sourceMappingURL=pos.routes.js.map