"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const clerk_controller_1 = require("../controllers/inventory/clerk.controller");
const errorHandler_1 = require("../middleware/errorHandler");
const router = express_1.default.Router();
router.get('/dashboard', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getDashboard));
router.get('/products', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getProducts));
router.get('/products/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getProductById));
router.post('/products', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createProduct));
router.put('/products/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.updateProduct));
router.delete('/products/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.deleteProduct));
router.get('/categories', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getCategories));
router.get('/categories/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getCategoryById));
router.post('/categories', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createCategory));
router.put('/categories/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.updateCategory));
router.delete('/categories/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.deleteCategory));
router.get('/suppliers', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getSuppliers));
router.get('/suppliers/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getSupplierById));
router.post('/suppliers', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createSupplier));
router.put('/suppliers/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.updateSupplier));
router.delete('/suppliers/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.deleteSupplier));
router.get('/transactions', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getInventoryTransactions));
router.post('/transactions', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createInventoryTransaction));
router.get('/adjustments', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getStockAdjustments));
router.post('/adjustments', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createStockAdjustment));
router.get('/movements', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getStockMovements));
router.get('/purchase-orders', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getPurchaseOrders));
router.get('/purchase-orders/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getPurchaseOrderById));
router.post('/purchase-orders', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createPurchaseOrder));
router.put('/purchase-orders/:id', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.updatePurchaseOrder));
router.get('/purchase-orders/:orderId/items', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getPurchaseOrderItems));
router.post('/purchase-order-items', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createPurchaseOrderItem));
router.get('/alerts', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getStockAlerts));
router.patch('/alerts/:id/resolve', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.resolveStockAlert));
router.get('/counts', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getInventoryCounts));
router.post('/counts', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createInventoryCount));
router.get('/counts/:countId/items', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getInventoryCountItems));
router.post('/count-items', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.createInventoryCountItem));
router.get('/reports/inventory', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getInventoryReport));
router.get('/reports/stock-movements', (0, errorHandler_1.asyncHandler)(clerk_controller_1.InventoryClerkController.getStockMovementReport));
exports.default = router;
//# sourceMappingURL=inventory.routes.js.map